{"version":3,"sources":["src/vizualization/line.js","src/graph/graph.js","src/linked-list/node.js","src/utils.js","src/linked-list/linkedlist.js","src/vizualization/shapes.js","src/graph/graphVertex.js","src/graph/graphEdge.js","src/graphviz.js","src/main.js"],"names":["Line","context","x1","y1","x2","y2","beginPath","moveTo","lineTo","closePath","stroke","Graph","isDirected","vertices","edges","newVertex","getKey","vertexKey","vertex","getNeighbors","Object","values","edge","startVertex","getVertexByKey","endVertex","addVertex","Error","addEdge","line","shape","ctx","right","x","y","left","draw","deleteEdge","findEdge","getAllEdges","reduce","weight","graphEdge","forEach","reverse","verticesIndices","getAllVertices","index","getVerticesIndices","adjacencyMatrix","Array","length","fill","map","Infinity","vertexIndex","neighbor","neighborIndex","keys","toString","LinkedListNode","value","next","callback","utils","guid","s4","Math","floor","random","substring","randomId","substr","toUpperCase","Comparator","compareFunction","compare","defaultCompareFunction","a","b","lessThan","equal","greaterThan","compareOriginal","LinkedList","comparatorFunction","head","tail","newNode","deletedNode","currentNode","undefined","deletedTail","deletedHead","append","nodes","push","toArray","node","currNode","prevNode","nextNode","Shape","l","text","font","fillStyle","textAlign","textBaseLine","fillText","center","Circle","r","top","bottom","color","strokeCol","arc","PI","lineWidth","strokeStyle","drawText","Square","rect","GraphVertex","type","edgeComparator","edgeA","edgeB","id","delete","neighborsConverter","linkedListNode","requiredEdge","edgeNode","find","vertexNode","edgeFinder","getEdges","GraphEdge","startVertexKey","endVertexKey","tmp","GraphViz","graph","offsetInline","offsetSpaced","R","L","startPos","fNode","nodeName","inline_with","nodeInlined","newPos","sNode","fNodeVertex","sNodeVertex","canvas","document","getElementById","getContext","gviz","pr_node","addNode","sc_node","th_node"],"mappings":"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","file":"main.1e43358e.map","sourceRoot":"..","sourcesContent":["export default class Line {\n    constructor(context, x1, y1, x2, y2) {\n        this.x1 = x1;\n        this.x2 = x2;\n        this.y1 = y1;\n        this.y2 = y2;\n        this.context = context;\n    }\n\n\n    draw() {\n        this.context.beginPath();\n        this.context.moveTo(this.x1, this.y1);\n        this.context.lineTo(this.x2, this.y2);\n        this.context.closePath();\n        this.context.stroke();\n    }\n}","import Line from '../vizualization/line';\n\nexport default class Graph {\n    /**\n     * @param {boolean} isDirected\n     */\n    constructor(isDirected = false) {\n        this.vertices = {};\n        this.edges = {};\n        this.isDirected = isDirected;\n    }\n\n    /**\n     * @param {GraphVertex} newVertex\n     * @returns {Graph}\n     */\n    addVertex(newVertex) {\n        this.vertices[newVertex.getKey()] = newVertex;\n        return this;\n    }\n\n    /**\n     * @param {string} vertexKey\n     * @returns GraphVertex\n     */\n    getVertexByKey(vertexKey) {\n        return this.vertices[vertexKey];\n    }\n\n    /**\n     * @param {GraphVertex} vertex\n     * @returns {GraphVertex[]}\n     */\n    getNeighbors(vertex) {\n        return vertex.getNeighbors();\n    }\n\n    /**\n     * @return {GraphVertex[]}\n     */\n    getAllVertices() {\n        return Object.values(this.vertices);\n    }\n\n    /**\n     * @return {GraphEdge[]}\n     */\n    getAllEdges() {\n        return Object.values(this.edges);\n    }\n\n    /**\n     * @param {GraphEdge} edge\n     * @returns {Graph}\n     */\n    addEdge(edge) {\n        // Try to find and end start vertices.\n        let startVertex = this.getVertexByKey(edge.startVertex.getKey());\n        let endVertex = this.getVertexByKey(edge.endVertex.getKey());\n\n        // Insert start vertex if it wasn't inserted.\n        if (!startVertex) {\n            this.addVertex(edge.startVertex);\n            startVertex = this.getVertexByKey(edge.startVertex.getKey());\n        }\n\n        // Insert end vertex if it wasn't inserted.\n        if (!endVertex) {\n            this.addVertex(edge.endVertex);\n            endVertex = this.getVertexByKey(edge.endVertex.getKey());\n        }\n\n        // Check if edge has been already added.\n        if (this.edges[edge.getKey()]) {\n            throw new Error('Edge has already been added before');\n        } else {\n            this.edges[edge.getKey()] = edge;\n        }\n\n        // Add edge to the vertices.\n        if (this.isDirected) {\n            // If graph IS directed then add the edge only to start vertex.\n            startVertex.addEdge(edge);\n        } else {\n            // If graph ISN'T directed then add the edge to both vertices.\n            startVertex.addEdge(edge);\n            endVertex.addEdge(edge);\n        }\n\n        let line = new Line(startVertex.shape.ctx, startVertex.shape.edges.right.x, startVertex.shape.edges.right.y, endVertex.shape.edges.left.x, endVertex.shape.edges.right.y);\n        line.draw();\n\n        return this;\n    }\n\n    /**\n     * @param {GraphEdge} edge\n     */\n    deleteEdge(edge) {\n        // Delete edge from the list of edges.\n        if (this.edges[edge.getKey()]) {\n            delete this.edges[edge.getKey()];\n        } else {\n            throw new Error('Edge not found in graph');\n        }\n\n        // Try to find and end start vertices and delete edge from them.\n        const startVertex = this.getVertexByKey(edge.startVertex.getKey());\n        const endVertex = this.getVertexByKey(edge.endVertex.getKey());\n\n        startVertex.deleteEdge(edge);\n        endVertex.deleteEdge(edge);\n    }\n\n    /**\n     * @param {GraphVertex} startVertex\n     * @param {GraphVertex} endVertex\n     * @return {(GraphEdge|null)}\n     */\n    findEdge(startVertex, endVertex) {\n        const vertex = this.getVertexByKey(startVertex.getKey());\n\n        if (!vertex) {\n            return null;\n        }\n\n        return vertex.findEdge(endVertex);\n    }\n\n    /**\n     * @return {number}\n     */\n    getWeight() {\n        return this.getAllEdges().reduce((weight, graphEdge) => {\n            return weight + graphEdge.weight;\n        }, 0);\n    }\n\n    /**\n     * Reverse all the edges in directed graph.\n     * @return {Graph}\n     */\n    reverse() {\n        /** @param {GraphEdge} edge */\n        this.getAllEdges().forEach((edge) => {\n            // Delete straight edge from graph and from vertices.\n            this.deleteEdge(edge);\n\n            // Reverse the edge.\n            edge.reverse();\n\n            // Add reversed edge back to the graph and its vertices.\n            this.addEdge(edge);\n        });\n\n        return this;\n    }\n\n    /**\n     * @return {object}\n     */\n    getVerticesIndices() {\n        const verticesIndices = {};\n        this.getAllVertices().forEach((vertex, index) => {\n            verticesIndices[vertex.getKey()] = index;\n        });\n\n        return verticesIndices;\n    }\n\n    /**\n     * @return {*[][]}\n     */\n    getAdjacencyMatrix() {\n        const vertices = this.getAllVertices();\n        const verticesIndices = this.getVerticesIndices();\n\n        // Init matrix with infinities meaning that there is no ways of\n        // getting from one vertex to another yet.\n        const adjacencyMatrix = Array(vertices.length).fill(null).map(() => {\n            return Array(vertices.length).fill(Infinity);\n        });\n\n        // Fill the columns.\n        vertices.forEach((vertex, vertexIndex) => {\n            vertex.getNeighbors().forEach((neighbor) => {\n                const neighborIndex = verticesIndices[neighbor.getKey()];\n                adjacencyMatrix[vertexIndex][neighborIndex] = this.findEdge(vertex, neighbor).weight;\n            });\n        });\n\n        return adjacencyMatrix;\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return Object.keys(this.vertices).toString();\n    }\n}","export default class LinkedListNode {\n    constructor(value, next = null) {\n        this.value = value;\n        this.next = next;\n    }\n\n    toString(callback) {\n        return callback ? callback(this.value) : `${this.value}`;\n    }\n}","export let utils = {\n    guid() {\n        function s4() {\n            return Math.floor((1 + Math.random()) * 0x10000)\n                .toString(16)\n                .substring(1);\n        }\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    },\n    randomId() {\n        return Math.random().toString(36).substr(2, 9).toUpperCase();\n    }\n};\n\n\nexport class Comparator {\n    /**\n     * @param {function(a: *, b: *)} [compareFunction] - It may be custom compare function that, let's\n     * say may compare custom objects together.\n     */\n    constructor(compareFunction) {\n        this.compare = compareFunction || Comparator.defaultCompareFunction;\n    }\n\n    /**\n     * Default comparison function. It just assumes that \"a\" and \"b\" are strings or numbers.\n     * @param {(string|number)} a\n     * @param {(string|number)} b\n     * @returns {number}\n     */\n    static defaultCompareFunction(a, b) {\n        if (a === b) {\n            return 0;\n        }\n\n        return a < b ? -1 : 1;\n    }\n\n    /**\n     * Checks if two variables are equal.\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    equal(a, b) {\n        return this.compare(a, b) === 0;\n    }\n\n    /**\n     * Checks if variable \"a\" is less than \"b\".\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    lessThan(a, b) {\n        return this.compare(a, b) < 0;\n    }\n\n    /**\n     * Checks if variable \"a\" is greater than \"b\".\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    greaterThan(a, b) {\n        return this.compare(a, b) > 0;\n    }\n\n    /**\n     * Checks if variable \"a\" is less than or equal to \"b\".\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    lessThanOrEqual(a, b) {\n        return this.lessThan(a, b) || this.equal(a, b);\n    }\n\n    /**\n     * Checks if variable \"a\" is greater than or equal to \"b\".\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    greaterThanOrEqual(a, b) {\n        return this.greaterThan(a, b) || this.equal(a, b);\n    }\n\n    /**\n     * Reverses the comparison order.\n     */\n    reverse() {\n        const compareOriginal = this.compare;\n        this.compare = (a, b) => compareOriginal(b, a);\n    }\n}","import LinkedListNode from './node';\nimport { Comparator } from '../utils';\n\n\nexport default class LinkedList {\n    /**\n     * @param {Function} [comparatorFunction]\n     */\n    constructor(comparatorFunction) {\n        /** @var LinkedListNode */\n        this.head = null;\n\n        /** @var LinkedListNode */\n        this.tail = null;\n\n        this.compare = new Comparator(comparatorFunction);\n    }\n\n    /**\n     * @param {*} value\n     * @return {LinkedList}\n     */\n    prepend(value) {\n        // Make new node to be a head.\n        const newNode = new LinkedListNode(value, this.head);\n        this.head = newNode;\n\n        // If there is no tail yet let's make new node a tail.\n        if (!this.tail) {\n            this.tail = newNode;\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {*} value\n     * @return {LinkedList}\n     */\n    append(value) {\n        const newNode = new LinkedListNode(value);\n\n        // If there is no head yet let's make new node a head.\n        if (!this.head) {\n            this.head = newNode;\n            this.tail = newNode;\n\n            return this;\n        }\n\n        // Attach new node to the end of linked list.\n        this.tail.next = newNode;\n        this.tail = newNode;\n\n        return this;\n    }\n\n    /**\n     * @param {*} value\n     * @return {LinkedListNode}\n     */\n    delete(value) {\n        if (!this.head) {\n            return null;\n        }\n\n        let deletedNode = null;\n\n        // If the head must be deleted then make next node that is differ\n        // from the head to be a new head.\n        while (this.head && this.compare.equal(this.head.value, value)) {\n            deletedNode = this.head;\n            this.head = this.head.next;\n        }\n\n        let currentNode = this.head;\n\n        if (currentNode !== null) {\n            // If next node must be deleted then make next node to be a next next one.\n            while (currentNode.next) {\n                if (this.compare.equal(currentNode.next.value, value)) {\n                    deletedNode = currentNode.next;\n                    currentNode.next = currentNode.next.next;\n                } else {\n                    currentNode = currentNode.next;\n                }\n            }\n        }\n\n        // Check if tail must be deleted.\n        if (this.compare.equal(this.tail.value, value)) {\n            this.tail = currentNode;\n        }\n\n        return deletedNode;\n    }\n\n    /**\n     * @param {Object} findParams\n     * @param {*} findParams.value\n     * @param {function} [findParams.callback]\n     * @return {LinkedListNode}\n     */\n    find({ value = undefined, callback = undefined }) {\n        if (!this.head) {\n            return null;\n        }\n\n        let currentNode = this.head;\n\n        while (currentNode) {\n            // If callback is specified then try to find node by callback.\n            if (callback && callback(currentNode.value)) {\n                return currentNode;\n            }\n\n            // If value is specified then try to compare by value..\n            if (value !== undefined && this.compare.equal(currentNode.value, value)) {\n                return currentNode;\n            }\n\n            currentNode = currentNode.next;\n        }\n\n        return null;\n    }\n\n    /**\n     * @return {LinkedListNode}\n     */\n    deleteTail() {\n        const deletedTail = this.tail;\n\n        if (this.head === this.tail) {\n            // There is only one node in linked list.\n            this.head = null;\n            this.tail = null;\n\n            return deletedTail;\n        }\n\n        // If there are many nodes in linked list...\n\n        // Rewind to the last node and delete \"next\" link for the node before the last one.\n        let currentNode = this.head;\n        while (currentNode.next) {\n            if (!currentNode.next.next) {\n                currentNode.next = null;\n            } else {\n                currentNode = currentNode.next;\n            }\n        }\n\n        this.tail = currentNode;\n\n        return deletedTail;\n    }\n\n    /**\n     * @return {LinkedListNode}\n     */\n    deleteHead() {\n        if (!this.head) {\n            return null;\n        }\n\n        const deletedHead = this.head;\n\n        if (this.head.next) {\n            this.head = this.head.next;\n        } else {\n            this.head = null;\n            this.tail = null;\n        }\n\n        return deletedHead;\n    }\n\n    /**\n     * @param {*[]} values - Array of values that need to be converted to linked list.\n     * @return {LinkedList}\n     */\n    fromArray(values) {\n        values.forEach(value => this.append(value));\n\n        return this;\n    }\n\n    /**\n     * @return {LinkedListNode[]}\n     */\n    toArray() {\n        const nodes = [];\n\n        let currentNode = this.head;\n        while (currentNode) {\n            nodes.push(currentNode);\n            currentNode = currentNode.next;\n        }\n\n        return nodes;\n    }\n\n    /**\n     * @param {function} [callback]\n     * @return {string}\n     */\n    toString(callback) {\n        return this.toArray().map(node => node.toString(callback)).toString();\n    }\n\n    /**\n     * Reverse a linked list.\n     * @returns {LinkedList}\n     */\n    reverse() {\n        let currNode = this.head;\n        let prevNode = null;\n        let nextNode = null;\n\n        while (currNode) {\n            // Store next node.\n            nextNode = currNode.next;\n\n            // Change next node of the current node so it would link to previous node.\n            currNode.next = prevNode;\n\n            // Move prevNode and currNode nodes one step forward.\n            prevNode = currNode;\n            currNode = nextNode;\n        }\n\n        // Reset head and tail.\n        this.tail = this.head;\n        this.head = prevNode;\n\n        return this;\n    }\n}","// export default class Circle {\n//     constructor(context, cx, cy, r, text) {\n//         this.x = cx;\n//         this.y = cy;\n//         this.r = r;\n//         this.context = context;\n//         this.center = {\n//             x: this.x,\n//             y: this.y\n//         }\n//         this.edges = {\n//             top: {\n//                 x: cx,\n//                 y: cy - r\n//             },\n//             left: {\n//                 x: cx - r,\n//                 y: cy\n//             },\n//             right: {\n//                 x: cx + r,\n//                 y: cy\n//             },\n//             bottom: {\n//                 x: cx,\n//                 y: cy + r\n//             }\n//         }\n//         this.text = text || '';\n//     }\n\n//     draw(color = 'rgb(42,220,113)', strokeCol = '#333') {\n//         // Draw Circle\n//         this.context.beginPath();\n//         this.context.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n//         this.context.closePath();\n//         this.context.lineWidth = 1;\n//         this.context.strokeStyle = strokeCol\n//         this.context.stroke();\n\n//         // Draw Text inside Circle\n//         this.context.beginPath();\n//         this.context.font = '15px Arial';\n//         this.context.fillStyle = \"black\";\n//         this.context.textAlign = 'center';\n//         this.context.fillText(\"Const (2)\", this.x, this.y);\n//         this.context.fill();\n//     }\n\n\n// }\n\nclass Shape {\n    constructor(context, x, y, l, text) {\n        this.ctx = context;\n        this.x = x;\n        this.y = y;\n        this.l = l;\n        this.text = text;\n    }\n\n    drawText() {\n        // Draw Text inside Circle\n        this.ctx.beginPath();\n        this.ctx.font = '15px Arial';\n        this.ctx.fillStyle = \"black\";\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseLine = 'middle';\n        this.ctx.fillText(this.text, this.center.x, this.center.y);\n        this.ctx.fill();\n\n    }\n\n}\n\n\nexport class Circle extends Shape {\n    constructor(context, x, y, r, text) {\n        super(context, x, y, r, text);\n        this.center = {\n            x: this.x,\n            y: this.y\n        }\n        this.edges = {\n            top: {\n                x: this.x,\n                y: this.y - this.l\n            },\n            left: {\n                x: this.x - this.l,\n                y: this.y\n            },\n            right: {\n                x: this.x + this.l,\n                y: this.y\n            },\n            bottom: {\n                x: this.x,\n                y: this.y + this.l\n            }\n        }\n    }\n\n    draw(color = 'rgb(42,220,113)', strokeCol = \"#000\") {\n        this.ctx.beginPath();\n        this.ctx.arc(this.x, this.y, this.l, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeStyle = strokeCol\n        this.ctx.stroke();\n\n        this.drawText();\n    }\n\n\n}\n\n\n\n\nexport class Square extends Shape {\n    constructor(context, x, y, l, text) {\n        super(context, x, y, l, text);\n        this.center = {\n            x: x + l / 2,\n            y: y + l / 2\n        }\n        this.edges = {\n            top: {\n                x: this.center.x,\n                y: this.center.y - l / 2\n            },\n            left: {\n                x: this.center.x - l / 2,\n                y: this.center.y\n            },\n            right: {\n                x: this.center.x + l / 2,\n                y: this.center.y\n            },\n            bottom: {\n                x: this.center.x,\n                y: this.center.y + l / 2\n            }\n        }\n    }\n\n\n    draw(color = \"rgb(42, 220, 113)\", strokeCol = \"#000\") {\n\n        this.ctx.beginPath();\n        this.ctx.rect(this.x, this.y, this.l, this.l);\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeStyle = strokeCol;\n        this.ctx.stroke();\n        this.ctx.closePath();\n\n        this.drawText();\n    }\n}","import LinkedList from '../linked-list/linkedlist';\nimport { utils } from '../utils';\nimport { Square, Circle } from '../vizualization/shapes';\n// import Circle from '../vizualization/circle';\n\nexport default class GraphVertex {\n    /**\n     * @param {*} value\n     */\n    constructor(value, { context, text = '', type = 'square', x, y, l }) {\n        if (value === undefined) {\n            throw new Error('Graph vertex must have a value');\n        }\n\n        /**\n         * @param {GraphEdge} edgeA\n         * @param {GraphEdge} edgeB\n         */\n        const edgeComparator = (edgeA, edgeB) => {\n            if (edgeA.getKey() === edgeB.getKey()) {\n                return 0;\n            }\n\n            return edgeA.getKey() < edgeB.getKey() ? -1 : 1;\n        };\n\n        // Normally you would store string value like vertex name.\n        // But generally it may be any object as well\n        this.value = value;\n        this.edges = new LinkedList(edgeComparator);\n        this.text = text || 'node';\n        this.id = utils.guid();\n        this.type = type // square , circle\n        if (this.type === 'square') {\n            this.shape = new Square(context, x, y, l, this.text)\n\n        } else {\n            this.shape = new Circle(context, x, y, l / 2, this.text);\n        }\n    }\n\n    /**\n     * @param {GraphEdge} edge\n     * @returns {GraphVertex}\n     */\n    addEdge(edge) {\n        this.edges.append(edge);\n\n        return this;\n    }\n    /**\n     * \n     * @param {string} text\n     * @return {string} \n     */\n    addText(text) {\n        this.text = text;\n    }\n\n    /**\n     * @param {GraphEdge} edge\n     */\n    deleteEdge(edge) {\n        this.edges.delete(edge);\n    }\n\n    /**\n     * @returns {GraphVertex[]}\n     */\n    getNeighbors() {\n        const edges = this.edges.toArray();\n\n        /** @param {LinkedListNode} node */\n        const neighborsConverter = (node) => {\n            return node.value.startVertex === this ? node.value.endVertex : node.value.startVertex;\n        };\n\n        // Return either start or end vertex.\n        // For undirected graphs it is possible that current vertex will be the end one.\n        return edges.map(neighborsConverter);\n    }\n\n    /**\n     * @return {GraphEdge[]}\n     */\n    getEdges() {\n        return this.edges.toArray().map(linkedListNode => linkedListNode.value);\n    }\n\n    /**\n     * @return {number}\n     */\n    getDegree() {\n        return this.edges.toArray().length;\n    }\n\n    /**\n     * @param {GraphEdge} requiredEdge\n     * @returns {boolean}\n     */\n    hasEdge(requiredEdge) {\n        const edgeNode = this.edges.find({\n            callback: edge => edge === requiredEdge,\n        });\n\n        return !!edgeNode;\n    }\n\n    /**\n     * @param {GraphVertex} vertex\n     * @returns {boolean}\n     */\n    hasNeighbor(vertex) {\n        const vertexNode = this.edges.find({\n            callback: edge => edge.startVertex === vertex || edge.endVertex === vertex,\n        });\n\n        return !!vertexNode;\n    }\n\n    /**\n     * @param {GraphVertex} vertex\n     * @returns {(GraphEdge|null)}\n     */\n    findEdge(vertex) {\n        const edgeFinder = (edge) => {\n            return edge.startVertex === vertex || edge.endVertex === vertex;\n        };\n\n        const edge = this.edges.find({ callback: edgeFinder });\n\n        return edge ? edge.value : null;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getKey() {\n        return this.value;\n    }\n\n    /**\n     * @return {string}\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * @return {string}\n     */\n    getType() {\n        return this.type;\n    }\n\n\n    /**\n     * @return {Square | Circle}\n     */\n    getShape() {\n        return this.shape;\n    }\n\n    /**\n     * @return {GraphVertex}\n     */\n    deleteAllEdges() {\n        this.getEdges().forEach(edge => this.deleteEdge(edge));\n\n        return this;\n    }\n\n    /**\n     * @param {function} [callback]\n     * @returns {string}\n     */\n    toString(callback) {\n        return callback ? callback(this.value) : `${this.value}`;\n    }\n}","export default class GraphEdge {\n  /**\n   * @param {GraphVertex} startVertex\n   * @param {GraphVertex} endVertex\n   * @param {number} [weight=1]\n   */\n  constructor(startVertex, endVertex, context, weight = 0) {\n    this.startVertex = startVertex;\n    this.endVertex = endVertex;\n    this.weight = weight;\n  }\n\n  /**\n   * @return {string}\n   */\n  getKey() {\n    const startVertexKey = this.startVertex.getKey();\n    const endVertexKey = this.endVertex.getKey();\n\n    return `${startVertexKey}_${endVertexKey}`;\n  }\n\n  /**\n   * @return {GraphEdge}\n   */\n  reverse() {\n    const tmp = this.startVertex;\n    this.startVertex = this.endVertex;\n    this.endVertex = tmp;\n\n    return this;\n  }\n\n\n  connect() {\n\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    return this.getKey();\n  }\n}","import Graph from './graph/graph';\nimport GraphVertex from './graph/graphVertex';\nimport GraphEdge from './graph/graphEdge';\nexport class GraphViz {\n\n    constructor(context) {\n        this.graph = new Graph();\n        this.ctx = context;\n        this.offsetInline = {\n            x: 80,\n            y: 80\n        };\n        this.offsetSpaced = {\n            x: 100,\n            y: 100\n        }\n        this.R = 40;\n        this.L = this.R * 2;\n        this.startPos = {\n            x: 50,\n            y: 50\n        }\n        this.prevNode = null;\n        this.fNode = false;\n    }\n\n    addNode(nodeName, text = '', inline_with = null, type = 'square') {\n        type = type || 'square';\n\n        if (this.fNode) {\n            // Not First Pos\n            this.startPos = {\n                x: this.startPos.x + this.offsetSpaced.x,\n                y: this.startPos.y + this.offsetSpaced.y\n            }\n        }\n\n        if (inline_with) { // Same Hotizontal Position\n            let nodeInlined = this.graph.getVertexByKey(inline_with);\n            /**\n             * 1- Check Node Type -> (Circle , Square)\n             * 2- Calculate position of new node respctive to nodeInlined\n             */\n            let newPos;\n            if (type === 'square') {\n                // Square Case\n                newPos = {\n                    x: nodeInlined.shape.center.x + this.offsetInline.x + this.L,\n                    y: nodeInlined.shape.center.y - this.L / 2\n                }\n            } else {\n                // Circle Case\n                newPos = {\n                    x: nodeInlined.shape.center.x + this.offsetInline.x + this.R,\n                    y: nodeInlined.shape.center.y\n                }\n            }\n\n            let node = new GraphVertex(nodeName, { type, context: this.ctx, text, type, ...newPos, l: this.L });\n            this.graph.addVertex(node);\n            node.shape.draw();\n            this.prevNode = node;\n            this.startPos = {\n                ...node.shape.center\n            }\n            this.fNode = true;\n            return nodeName;\n        }\n\n\n        let node = new GraphVertex(nodeName, { type, context: this.ctx, text, type, ...this.startPos, l: this.L });\n        this.graph.addVertex(node);\n        node.shape.draw();\n        this.startPos = {\n            ...node.shape.center\n        }\n        this.prevNode = node;\n        return nodeName;\n    }\n    addEdge(fNode, sNode) {\n        let fNodeVertex = this.graph.getVertexByKey(fNode);\n        let sNodeVertex = this.graph.getVertexByKey(sNode);\n        let edge = new GraphEdge(fNodeVertex, sNodeVertex);\n        this.graph\n            .addEdge(edge);\n\n    }\n\n\n\n}","import { GraphViz } from './graphviz'\n\n\nlet canvas = document.getElementById('graph');\nlet context = canvas.getContext('2d');\nlet gviz = new GraphViz(context);\n\n\nlet pr_node = gviz.addNode('A', 'Const (X)', null, 'circle');\nlet sc_node = gviz.addNode('B', 'Const (Z)', pr_node);\nlet th_node = gviz.addNode('C', 'Cont (U)');\n// gviz.addNode('D', 'Const (D)', th_node, 'circle');\ngviz.addEdge(pr_node, sc_node);\ngviz.addEdge(sc_node, th_node);\n// gviz.addEdge(sc_node, 'D');\n\n\n\n\n"]}